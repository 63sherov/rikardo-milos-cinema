import logging

from aiogram import types
from contextlib import suppress
from aiogram.utils.exceptions import MessageNotModified
import markups as nav
from func import check_member_channel, get_invite_link, open_admin, save_user_id
from loader import dp, bot
from run_channels import open_channel

logging.basicConfig(level=logging.INFO)


@dp.message_handler(commands=['start'], chat_type=types.ChatType.PRIVATE)
async def start(message: types.Message):

    await message.answer(
                           "ü•§–í—Å–µ –Ω–æ–≤–∏–Ω–∫–∏ —Ñ–∏–ª—å–º–æ–≤ 2022 –¥–æ—Å—Ç—É–ø–Ω—ã –Ω–∞ –Ω–∞—à–µ–º –ø—Ä–∏–≤–∞—Ç–Ω–æ–º –∫–∞–Ω–∞–ª–µ.\n\n"
                           "üì≤–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ üëáüëáüëá",
                           reply_markup=nav.startWatchMenu)
    await save_user_id(message.from_user.id)


@dp.callback_query_handler(text="start_watch", chat_type=types.ChatType.PRIVATE)
async def checksubquery(call: types.CallbackQuery):
    user_id = call.message.chat.id
    without_sub = ""
    step = 0
    channels = await open_channel()

    for channel_id in channels:
        member = await check_member_channel(channel_id, user_id)
        if not member:
            link = await get_invite_link(channel_id)
            if not link:
                continue
            step += 1

            without_sub += f"<b>–ö–∞–Ω–∞–ª {step} -</b> {link}\n"

    if without_sub != "":
        with suppress(MessageNotModified):

            await call.message.edit_text(
                f"‚ùå –î–û–°–¢–£–ü –ó–ê–ö–†–´–¢ ‚ùå\n\nüëâ–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É –∫–∞–Ω–∞–ª—É –Ω—É–∂–Ω–æ –±—ã—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–º <b>–ö–∏–Ω–æ-–∫–∞–Ω–∞–ª–æ–≤.</b>\n\n"
                f"–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã –Ω–∏–∂–µ üëá –∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É <b>–Ø –ü–û–î–ü–ò–°–ê–õ–°–Ø</b> –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏!\n\n{without_sub}",
                reply_markup=nav.checkSubMenu, disable_web_page_preview=True)

    else:
        with suppress(MessageNotModified):

            await call.message.edit_text(
                "‚úÖ –î–û–°–¢–£–ü –û–¢–ö–†–´–¢\n\n–í—Å–µ –Ω–æ–≤–∏–Ω–∫–∏ 2022 —Å–ª–∏–≤–∞–µ–º –Ω–∞ –Ω–∞—à –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª. <b>–ü–æ–¥–ø–∏—à–∏—Å—å üëá</b>",
                reply_markup=nav.urlChannelMenu, disable_web_page_preview=True)


@dp.callback_query_handler(text="check_sub", chat_type=types.ChatType.PRIVATE)
async def checksubquery(call: types.CallbackQuery):
    # await bot.delete_message(message.from_user.id, message.message.message_id)

    user_id = call.message.chat.id
    without_sub = ""
    step = 0
    channels = await open_channel()

    for channel_id in channels:
        member = await check_member_channel(channel_id, user_id)
        if not member:
            link = await get_invite_link(channel_id)
            if not link:
                continue
            step += 1
            without_sub += f"<b>–ö–∞–Ω–∞–ª {step} -</b> {link}\n"

    if without_sub != "":
        try:
            with suppress(MessageNotModified):

                await call.message.edit_text(
                    f"‚ùå –î–û–°–¢–£–ü –ó–ê–ö–†–´–¢ ‚ùå\n\nüëâ–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É –∫–∞–Ω–∞–ª—É –Ω—É–∂–Ω–æ –±—ã—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–º <b>–ö–∏–Ω–æ-–∫–∞–Ω–∞–ª–æ–≤.</b>"
                    f"\n\n–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã –Ω–∏–∂–µ üëá –∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É <b>–Ø –ü–û–î–ü–ò–°–ê–õ–°–Ø</b> –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏!\n\n{without_sub}",
                    reply_markup=nav.checkSubMenu, disable_web_page_preview=True)
                await call.answer("–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–µ –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã!")
        except:
            await call.answer("–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∏ –Ω–∞ –æ–¥–∏–Ω –∏–∑ –∫–∞–Ω–∞–ª–æ–≤!")
    else:
        with suppress(MessageNotModified):

            await call.message.edit_text(
                "‚úÖ –î–û–°–¢–£–ü –û–¢–ö–†–´–¢\n\n–í—Å–µ –Ω–æ–≤–∏–Ω–∫–∏ 2022 —Å–ª–∏–≤–∞–µ–º –Ω–∞ –Ω–∞—à –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª. <b>–ü–æ–¥–ø–∏—à–∏—Å—å üëá</b>",
                reply_markup=nav.urlChannelMenu, disable_web_page_preview=True)


@dp.message_handler(commands=['help'], chat_type=types.ChatType.PRIVATE)
async def help(message: types.Message):
    admins = await open_admin()

    if message.chat.id in admins:
        await message.answer("/all -> –ü–æ–∫–∞–∑–∞—Ç—å id –∞–¥–º–∏–Ω–æ–≤\n"
                             "/add <strong>user_id</strong> -> –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞\n"
                             "/rm <strong>user_id</strong> -> –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞\n\n"
                             "/all_chan -> –ü–æ–∫–∞–∑–∞—Ç—å id –∫–∞–Ω–∞–ª–æ–≤\n"
                             "/add_chan <strong>channel_id</strong> -> –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª\n"
                             "/rm_chan <strong>channel_id</strong> -> –£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª\n")
